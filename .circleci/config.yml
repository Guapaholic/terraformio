version: 2.1

references:
  stage_param: &stage_param
    type: enum
    enum: [dev, prod]
  master_only_filter: &master_branch_only
    branches:
      only: master
  prod_tag_filters: &prod_tag_only
    branches:
      ignore: /.*/
    tags:
      only: /prod-.*/
  terraform_executor_with_image: &terraform_executor
    name: terraform
    image: zenika/terraform-aws-cli:release-3.7_terraform-0.13.1_awscli-1.18.127

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  terraform: circleci/terraform@1.0.1

executors:
  terraform: terraform/default
  node:
    docker:
      - image: circleci/node:12.18.3

commands:
  prepare_tf:
    parameters:
      stage: *stage_param
    steps:
      - checkout
      - aws-cli/setup:
          aws-region: AWS_REGION
          skip-install-check: false
          version: '1'
      - terraform/init:
          path: $HOME/project/.aws/live/<< parameters.stage >>

jobs:
  apply_plan:
    executor: *terraform_executor
    parameters:
      stage: *stage_param
    steps:
      - prepare_tf:
          stage: << parameters.stage >>
      - terraform/apply:
          path: $HOME/project/.aws/live/<< parameters.stage >>

  validate_plan:
    executor: *terraform_executor
    parameters:
      stage: *stage_param
    steps:
      - prepare_tf:
          stage: << parameters.stage >>
      - terraform/plan:
          path: $HOME/project/.aws/live/<< parameters.stage >>
  tag_release:
    executor: node
    parameters:
      stage: *stage_param
    steps:
      - checkout
      - run:
          command: |
            git config --global user.email "circleci@circleci.com"
            git config --global user.name "CircleCI"
      - run: git tag << parameters.stage >>-$(date '+%s') -m "$(echo "<< parameters.stage >>" | awk '{ print toupper(substr($0,1,1)) tolower(substr($0,2,length($0 - 1))) }') release $(date '+%c')"
      - run: git push --tags

  test_functions:
    executor: node
    environment:
      JEST_JUNIT_OUTPUT_DIR: reports/junit/
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-add-junit-v1-{{ checksum "yarn.lock" }}
            - cache-add-junit-v1-
      - run:
          command: |
            yarn install --frozen-lockfile --cache-dir ~/.cache/yarn
            yarn add -D jest-junit
            git checkout yarn.lock
      - save_cache:
          key: cache-add-junit-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/project/node_modules/
      - run:
          command: |
            mkdir -p "$JEST_JUNIT_OUTPUT_DIR"
            yarn test --ci --runInBand --reporters=default --reporters=jest-junit
          name: Run unit tests
      - store_test_results:
          path: reports/junit/
      - store_artifacts:
          path: reports/junit/

workflows:
  deploy_dev:
    jobs:
      - test_functions:
          filters: *master_branch_only
      - validate_plan:
          context: deploy.dev
          name: validate_plan_dev
          stage: dev
          filters: *master_branch_only
      - apply_plan:
          context: deploy.dev
          name: apply_plan_dev
          stage: dev
          requires:
            - test_functions
            - validate_plan_dev
      - promote_to_prod:
          type: approval
          requires:
            - apply_plan_dev
      - tag_release:
          stage: prod
          requires:
            - promote_to_prod

  deploy_prod:
    jobs:
      - validate_plan:
          context: deploy.dev
          name: validate_plan_prod
          stage: prod
          filters: *prod_tag_only
      - apply_plan:
          context: deploy.dev
          name: apply_plan_prod
          stage: prod
          filters: *prod_tag_only
          requires:
            - validate_plan_prod
